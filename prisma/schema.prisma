// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String   @map("first_name")
  middleName String?  @map("middle_name")
  lastName   String   @map("last_name")
  role       Role
  avatar     String?
  email      String   @unique
  phone      String?  @unique
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations 
  shop       Shop[]
  vendor     Vendor?
  address    Address[]
  validation Validation?
  otp        OTP?

  @@map("user")
}

model Vendor {
  id Int @id @default(autoincrement())

  // Relations
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  @@map("vendor")
}

model Shop {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  logo          String?
  description   String   @unique
  website       String?
  phoneNumber   String?  @map("phone_number")
  facebookLink  String?  @map("facebook_link")
  instagramLink String?  @map("instagram_link")
  twitterLink   String?  @map("twitter_link")
  youtubeLink   String?  @map("youtube_link")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  //Relations
  address Address[]
  user    User?     @relation(fields: [userId], references: [id])
  userId  Int?

  @@map("shop")
}

model Address {
  id            Int      @id @default(autoincrement())
  country       String
  state         String
  city          String
  zipCode       Int      @map("zip_code")
  streetAddress String   @map("street_address")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  //Relations
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  shop   Shop? @relation(fields: [shopId], references: [id])
  shopId Int?  @unique

  @@map("address")
}

model Product {
  id            Int      @id @default(autoincrement())
  featuredImage String?  @map("featured_image")
  gallery       String[]
  description   String
  unit          Int
  price         Int
  quantity      Int
  salesPrice    Decimal? @map("sales_price")
  sku           String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  //Relations
  product_group    ProductGroup[]
  product_category ProductCategory[]

  @@map("product")
}

model ProductGroup {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //Relations
  product_category ProductCategory[]
  product          Product?          @relation(fields: [productId], references: [id])
  productId        Int?              @unique

  @@map("product_group")
}

model ProductCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String?
  slug        String   @unique
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //Relation
  product        Product?      @relation(fields: [productId], references: [id])
  productId      Int?
  ProductGroup   ProductGroup? @relation(fields: [productGroupId], references: [id])
  productGroupId Int?

  @@map("product_category")
}

model Validation {
  id        Int      @id @default(autoincrement())
  phone     Boolean
  email     Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //Relations
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  @@map("validation")
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String   @db.Char(6)
  type      OTP_ENUM
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //Relations
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  @@map("otp")
}

enum Role {
  CUSTOMER
  VENDOR
}

enum OTP_ENUM {
  PHONE
  EMAIL
  FORGOT_PASSWORD
}
